node {

    def rootDir = pwd()
    echo "rootDir: " + rootDir


    checkout scm
    job = load "building-blocks/jobFuncs.groovy"
    job.init()

	stage("Read Config") {
		script {
	
			def configVal = readYaml file: "profiles/config-react.yaml"
		    echo "configVal: " + configVal
    
            echo configVal['repo']
            env.REPO = configVal['repo']

            echo configVal['branch']
            env.BRANCH_NAME = configVal['branch']
		}
	}
}

properties([
            parameters([
                choice(choices: yamlsList, description: 'Select yaml with deploy configuration.', name: 'DeployYaml')
            ])
        ])

pipeline {
    agent {
        docker {
            alwaysPull true
            image 'rcbassil/myreact-container'
            args '-p 3000:3000'
        }
    }
    environment {
        CI = 'true'
    }
    stages {

        stage('Read Config')  {
            //when { expression { !SkipAllStages } }
            steps{ script {
                job.ReadConfig()
            } }
        }

        stage("example") { 
            steps{
                script {
                  unstable(message: "${STAGE_NAME} is unstable")
                }
            }
        }

        stage('Vault') {
          steps{
            script{
                job.GetVaultSecrets()
            }
          }
      }

//        stage('Vault 2'){
//            steps {
//               script {
//                job.GetSecret("git-personal-token")
//             }
//            }
//        }

        stage("Get params"){
            steps{
                sh "rm -rf myapps && git clone --no-checkout ${REPO} myapps"
                sh "cd myapps && git ls-tree -d --name-only ${BRANCH_NAME}"
            }
        }
        stage('Build') {
            steps {
                echo 'Build'
                sh "rm -rf react && git clone ${REPO} && cd react/expensesapp && npm install"
            }
        }
        stage('Test') {
            steps {
                echo 'Test'
                sh 'cp ./scripts/test.sh react/expensesapp/'
                sh 'cd react/expensesapp && chmod +x test.sh && ./test.sh'
                script {
                  unstable(message: "${STAGE_NAME} is unstable")
                }
            }
        }
        stage('Deliver') {
            steps {
                echo 'Deliver'
                sh 'cp ./scripts/deliver.sh react/expensesapp/'
                sh 'cp ./scripts/kill.sh react/expensesapp/'
                sh 'cd react/expensesapp && chmod +x deliver.sh && ./deliver.sh'
                input message: 'Finished using the web site? (Click "Proceed" to continue)'
                sh 'cd react/expensesapp && chmod +x kill.sh && ./kill.sh'
            }
        }
    }

     post {
        unstable {
             script {
                //job.CreateJIRADefect(jobName, buildURL, failedStage, unstableStage)
                echo unstableStage
                echo "UNSTABLE TEST"
            }
        }
    }
}